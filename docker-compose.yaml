# Immich Photo Management Stack
# Environment variables are loaded from .env file by default
# See DEVELOPMENT.md for detailed documentation
#
# ARM64 COMPATIBILITY NOTES:
# - All services support ARM64 architecture
# - Using latest tags for better ARM64 support where applicable

version: "3.8"

services:
  immich-server:
    container_name: "${CONTAINER_NAME_PREFIX}_immich_server"
    image: "ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}"
    user: "${PUID}:${PGID}"
    environment:
      - TZ=${TZ}
      - DB_HOSTNAME=database
      - DB_PORT=5432
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
    volumes:
      - "immich_upload_volume:/usr/src/app/upload"
      - "/etc/localtime:/etc/localtime:ro"
    networks:
      immich_app:
      immich_db:
      home_iot:
        ipv4_address: ${IMMICH_SERVER_IP}
      container_internet:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.immich.rule=Host(`pics.bierlysmith.com`)"
      - "traefik.http.routers.immich.entrypoints=web"
      - "traefik.http.services.immich.loadbalancer.server.port=3001"
    depends_on:
      - redis
      - database
    restart: unless-stopped
    healthcheck:
      disable: false
    privileged: ${ENABLE_IMMICH_PRIVILEGES:-false}

  immich-machine-learning:
    container_name: "${CONTAINER_NAME_PREFIX}_immich_ml"
    image: "ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}"
    environment:
      - TZ=${TZ}
    security_opt:
      - systempaths=unconfined
      - apparmor=unconfined
    devices:
      - ${IMMICH_DEVICE_DRI:-/dev/dri:/dev/dri}
    volumes:
      - "immich_cache_volume:/cache"
    networks:
      - immich_app
      - container_internet
    restart: unless-stopped
    healthcheck:
      disable: false

  redis:
    container_name: "${CONTAINER_NAME_PREFIX}_immich_redis"
    image: "redis:7-alpine"
    environment:
      - TZ=${TZ}
    networks:
      - immich_db
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  database:
    container_name: "${CONTAINER_NAME_PREFIX}_immich_postgres"
    image: "tensorchord/pgvecto-rs:pg14-v0.2.0"
    environment:
      - TZ=${TZ}
      - POSTGRES_PASSWORD=${IMMICH_DB_PASSWORD}
      - POSTGRES_USER=${IMMICH_DB_USERNAME}
      - POSTGRES_DB=${IMMICH_DB_DATABASE_NAME}
      - POSTGRES_INITDB_ARGS=--data-checksums
    networks:
      - immich_db
    volumes:
      - "immich_db_volume:/var/lib/postgresql/data"
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1; Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: >-
      postgres -c shared_preload_libraries=vectors.so -c 'search_path="$$user", public, vectors' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=512MB -c wal_compression=on
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-file: '5'
        max-size: 10m

  cloudflared:
    container_name: "${CONTAINER_NAME_PREFIX}_immich_cloudflared"
    image: "cloudflare/cloudflared:latest"
    entrypoint: ["cloudflared", "--no-autoupdate"]
    command: ["tunnel", "run"]
    user: "${PUID}:${PGID}"
    environment:
      - TUNNEL_TOKEN=${IMMICH_CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - immich_app
      - container_internet
    restart: unless-stopped
    deploy:
      replicas: ${ENABLE_IMMICH_CLOUDFLARED:-0}
    healthcheck:
      test: ["CMD", "cloudflared", "tunnel", "status"]
      interval: 120s
      timeout: 30s
      retries: 5
      start_period: 60s

networks:
  # Internal isolated network for inter-service communication
  immich_app:
    name: "${IMMICH_APP_NETWORK}"
    internal: true
    driver: bridge

  # Database network for database communication
  immich_db:
    name: "${IMMICH_DB_NETWORK}"
    internal: true
    driver: bridge

  # External network for internet access
  container_internet:
    external: true
    name: "containers_internet"

  # Home IoT network (optional)
  home_iot:
    external: ${ENABLE_HOME_IOT_NETWORK:-false}
    name: "${HOME_IOT_NETWORK:-home_iot}"

volumes:
  # Upload volume for photos and videos
  immich_upload_volume:
    name: "${CONTAINER_NAME_PREFIX}_immich_upload"
    driver: local
    driver_opts:
      type: ${IMMICH_UPLOAD_VOLUME_TYPE:-}
      o: ${IMMICH_UPLOAD_VOLUME_OPTIONS:-}
      device: ${IMMICH_UPLOAD_BASE:-}
  
  # Cache volume for machine learning models
  immich_cache_volume:
    name: "${CONTAINER_NAME_PREFIX}_immich_cache"
    driver: local
    driver_opts:
      type: ${IMMICH_CACHE_VOLUME_TYPE:-}
      o: ${IMMICH_CACHE_VOLUME_OPTIONS:-}
      device: ${IMMICH_CACHE_BASE:-}
  
  # Database volume for PostgreSQL data
  immich_db_volume:
    name: "${CONTAINER_NAME_PREFIX}_immich_db"
    driver: local
    driver_opts:
      type: ${IMMICH_DB_VOLUME_TYPE:-}
      o: ${IMMICH_DB_VOLUME_OPTIONS:-}
      device: ${IMMICH_DB_BASE:-} 