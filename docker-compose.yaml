# Immich Photo Management Stack - Docker Swarm Ready
# Environment variables are loaded from .env file by default
# See DEVELOPMENT.md for detailed documentation
#
# ARM64 COMPATIBILITY NOTES:
# - All services support ARM64 architecture
# - Using latest tags for better ARM64 support where applicable
#
# DOCKER SWARM NOTES:
# - Deploy with: docker stack deploy -c docker-compose.yaml immich
# - Requires external traefik_public network for proxy connectivity
# - Uses overlay networks for internal service communication

version: "3.8"

services:
  immich-server:
    image: "ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}"
    user: "${PUID}:${PGID}"
    environment:
      - TZ=${TZ}
      - DB_HOSTNAME=database
      - DB_PORT=5432
      - DB_USERNAME=${IMMICH_DB_USERNAME}
      - DB_PASSWORD=${IMMICH_DB_PASSWORD}
      - DB_DATABASE_NAME=${IMMICH_DB_DATABASE_NAME}
    volumes:
      - "immich_upload_volume:/usr/src/app/upload"
      - "/etc/localtime:/etc/localtime:ro"
    networks:
      - immich_stack
      - traefik_public

    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
        order: stop-first
      labels:
        - "traefik.enable=true"
        # Public Domain - HTTP Router
        - "traefik.http.routers.immich-public-http.rule=Host(`${IMMICH_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.immich-public-http.entrypoints=web"
        - "traefik.http.routers.immich-public-http.service=immich"
        # Public Domain - HTTPS Router
        - "traefik.http.routers.immich-public-https.rule=Host(`${IMMICH_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.immich-public-https.entrypoints=websecure"
        - "traefik.http.routers.immich-public-https.service=immich"
        - "traefik.http.routers.immich-public-https.tls=true"
        - "traefik.http.routers.immich-public-https.tls.certresolver=${IMMICH_CERT_RESOLVER:-letsencrypt}"
        # Private Domain - HTTP Router
        - "traefik.http.routers.immich-private-http.rule=Host(`${IMMICH_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.immich-private-http.entrypoints=web"
        - "traefik.http.routers.immich-private-http.service=immich"
        # Private Domain - HTTPS Router
        - "traefik.http.routers.immich-private-https.rule=Host(`${IMMICH_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.immich-private-https.entrypoints=websecure"
        - "traefik.http.routers.immich-private-https.service=immich"
        - "traefik.http.routers.immich-private-https.tls=true"
        - "traefik.http.routers.immich-private-https.tls.certresolver=${IMMICH_CERT_RESOLVER:-letsencrypt}"
        # Service Configuration
        - "traefik.http.services.immich.loadbalancer.server.port=2283"
        - "traefik.docker.network=traefik_public"

  immich-machine-learning:
    image: "ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}"
    user: "${PUID}:${PGID}"
    environment:
      - TZ=${TZ}
    volumes:
      - "immich_cache_volume:/cache"
    networks:
      - immich_stack
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
        order: stop-first

  redis:
    image: "redis:7-alpine"
    environment:
      - TZ=${TZ}
    networks:
      - immich_stack
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
        order: stop-first

  database:
    image: "tensorchord/pgvecto-rs:pg14-v0.2.0"
    environment:
      - TZ=${TZ}
      - POSTGRES_PASSWORD=${IMMICH_DB_PASSWORD}
      - POSTGRES_USER=${IMMICH_DB_USERNAME}
      - POSTGRES_DB=${IMMICH_DB_DATABASE_NAME}
      - POSTGRES_INITDB_ARGS=--data-checksums
    networks:
      - immich_stack
    volumes:
      - "immich_db_volume:/var/lib/postgresql/data"
    healthcheck:
      test: >-
        pg_isready --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" || exit 1; Chksum="$$(psql --dbname="$${POSTGRES_DB}" --username="$${POSTGRES_USER}" --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_period: 5m
    command: >-
      postgres -c shared_preload_libraries=vectors.so -c 'search_path="$$user", public, vectors' -c logging_collector=on -c max_wal_size=2GB -c shared_buffers=512MB -c wal_compression=on
    logging:
      driver: json-file
      options:
        max-file: '5'
        max-size: 10m
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
        order: stop-first

  cloudflared:
    image: "cloudflare/cloudflared:latest"
    entrypoint: ["cloudflared", "--no-autoupdate"]
    command: ["tunnel", "run"]
    user: "${PUID}:${PGID}"
    environment:
      - TUNNEL_TOKEN=${IMMICH_CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - immich_stack
    healthcheck:
      test: ["CMD", "cloudflared", "tunnel", "status"]
      interval: 120s
      timeout: 30s
      retries: 5
      start_period: 60s
    deploy:
      replicas: ${ENABLE_IMMICH_CLOUDFLARED:-0}
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 30s
        order: stop-first

networks:
  # Internal stack overlay network for inter-service communication
  immich_stack:
    driver: overlay
    internal: true
    attachable: false
    driver_opts:
      encrypted: "true"

  # External Traefik proxy network for load balancer connectivity
  traefik_public:
    external: true
    name: "traefik_public"

volumes:
  # Upload volume for photos and videos
  immich_upload_volume:
    name: "${CONTAINER_NAME_PREFIX}_immich_upload"
    driver: local
    driver_opts:
      type: ${IMMICH_UPLOAD_VOLUME_TYPE:-}
      o: ${IMMICH_UPLOAD_VOLUME_OPTIONS:-}
      device: ${IMMICH_UPLOAD_BASE:-}
  
  # Cache volume for machine learning models
  immich_cache_volume:
    name: "${CONTAINER_NAME_PREFIX}_immich_cache"
    driver: local
    driver_opts:
      type: ${IMMICH_CACHE_VOLUME_TYPE:-}
      o: ${IMMICH_CACHE_VOLUME_OPTIONS:-}
      device: ${IMMICH_CACHE_BASE:-}
  
  # Database volume for PostgreSQL data
  immich_db_volume:
    name: "${CONTAINER_NAME_PREFIX}_immich_db"
    driver: local
    driver_opts:
      type: ${IMMICH_DB_VOLUME_TYPE:-}
      o: ${IMMICH_DB_VOLUME_OPTIONS:-}
      device: ${IMMICH_DB_BASE:-} 